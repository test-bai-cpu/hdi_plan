<launch>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="paused" value="false"/>
  <arg name="use_unity_editor" default="false" />
  <arg name="x_init" default="0"/>
  <arg name="y_init" default="0"/>
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="$(arg paused)"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <group ns="hummingbird">

    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="hummingbird" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="hummingbird"/>
      <arg name="x" value="0.0" />
      <arg name="y" value="0.0"/>
    </include>

    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_hummingbird.yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/hummingbird.yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="0 0 1 0 5"/>

    <!-- RPG Flightmare Unity Render. -->
    <node name="rpg_flightmare_render" pkg="flightrender" type="RPG_Flightmare.x86_64" unless="$(arg use_unity_editor)">
    </node>

    <node name="start_quadrotor_node" pkg="hdi_plan" type="start_quadrotor_node" output="screen">
      <rosparam file="$(find hdi_plan)/params/start_quadrotor.yaml" />
      <remap from="hdi_plan/quadrotor_state" to="ground_truth/odometry" />
    </node>

    <node name="dynamic_motion_planner" pkg="hdi_plan" type="dynamic_motion_planner" output="screen" >
      <remap from="hdi_plan/quadrotor_state" to="ground_truth/odometry" />
    </node>

    <node name="publish_trajectory_node" pkg="hdi_plan" type="publish_trajectory_node" output="screen">
        <remap from="hdi_plan/quadrotor_state" to="ground_truth/odometry" />
    </node>
    
  </group>

</launch>
