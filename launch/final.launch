<?xml version="1.0"?>
<launch>
    <arg name="quad_name" default="hummingbird"/>

    <arg name="mav_name" default="$(arg quad_name)"/>
    <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo"/>
    <arg name="world_name" default="$(find rotors_gazebo)/worlds/basic.world"/>

    <arg name="use_unity_editor" default="false" />
    <arg name="paused" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="use_mpc" default="false"/>
    <arg name="use_ground_truth" default="true"/>
    <arg name="enable_ground_truth" default="true"/>
    <arg name="enable_command_feedthrough" default="false"/>
    <arg name="custom_models" default=""/>

    <arg name="enable_logging" default="false"/>
    <arg name="log_file" default="$(arg mav_name)"/>

    <arg name="x_init" default="0"/>
    <arg name="y_init" default="0"/>

    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>

    <param name="use_sim_time" value="true"/>

    <!-- Gazebo stuff to spawn the world !-->
    <env name="GAZEBO_MODEL_PATH"
         value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(arg custom_models)"/>
    <env name="GAZEBO_RESOURCE_PATH"
         value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="verbose" value="$(arg verbose)"/>
    </include>

    <!-- RotorS stuff to spawn the quadrotor !-->
    <group ns="$(arg mav_name)">
        <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
            <arg name="mav_name" value="$(arg mav_name)" />
            <arg name="model" value="$(arg model)" />
            <arg name="enable_logging" value="$(arg enable_logging)" />
            <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
            <arg name="log_file" value="$(arg log_file)"/>
            <arg name="x" value="$(arg x_init)" />
            <arg name="y" value="$(arg y_init)" />
        </include>
    </group>

    <!-- RPG stuff !-->
    <group ns="$(arg quad_name)" >

        <!-- RPG RotorS interface. -->
        <node pkg="rpg_rotors_interface" type="rpg_rotors_interface"
              name="rpg_rotors_interface" output="screen" >
            <rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
            <!-- .. -->
            <remap from="odometry" to="ground_truth/odometry" />
            <remap from="rpg_rotors_interface/arm" to="bridge/arm" />
        </node>

        <!-- RPG Flightmare Unity Render. -->
        <node pkg="flightrender" type="RPG_Flightmare.x86_64" name="rpg_flightmare_render" unless="$(arg use_unity_editor)">
        </node>

        <!-- Autopilot -->
        <node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
            <rosparam file="$(find state_predictor)/parameters/hummingbird.yaml" />
            <rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
            <rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />

            <param name="position_controller/use_rate_mode" value="True" />

            <param name="velocity_estimate_in_world_frame" value="false" />
            <param name="state_estimate_timeout" value="0.1" />
            <param name="control_command_delay" value="0.05" />
            <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />

            <remap from="autopilot/state_estimate" to="ground_truth/odometry" />
        </node>

        <node name="start_quadrotor_node" pkg="hdi_plan" type="start_quadrotor_node" output="screen">
            <rosparam file="$(find hdi_plan)/params/start_quadrotor.yaml" />
            <remap from="hdi_plan/quadrotor_state" to="ground_truth/odometry" />
        </node>

        <node name="dynamic_motion_planner" pkg="hdi_plan" type="dynamic_motion_planner" output="screen" >
            <rosparam file="$(find hdi_plan)/params/motion_planner.yaml" />
            <remap from="hdi_plan/quadrotor_state" to="ground_truth/odometry" />
        </node>

        <node name="generate_dynamic_scene_node" pkg="hdi_plan" type="generate_dynamic_scene_node" output="screen" >
        </node>

        <node name="publish_trajectory_node" pkg="hdi_plan" type="publish_trajectory_node" output="screen">
            <remap from="hdi_plan/quadrotor_state" to="ground_truth/odometry" />
        </node>

        <node name="path_visualization_node" pkg="hdi_plan" type="path_visualization_node" output="screen" >
            <remap from="hdi_plan/quadrotor_state" to="ground_truth/odometry" />
        </node>

    </group>

</launch>
